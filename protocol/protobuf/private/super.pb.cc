// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: super.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "super.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace PrivateProto {

namespace {

const ::google::protobuf::Descriptor* ZoneActiveInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZoneActiveInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegVerifiedAccountToGateway_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegVerifiedAccountToGateway_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZoneGatewayReady_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZoneGatewayReady_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_super_2eproto() {
  protobuf_AddDesc_super_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "super.proto");
  GOOGLE_CHECK(file != NULL);
  ZoneActiveInfo_descriptor_ = file->message_type(0);
  static const int ZoneActiveInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneActiveInfo, player_load_reserve_),
  };
  ZoneActiveInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ZoneActiveInfo_descriptor_,
      ZoneActiveInfo::default_instance_,
      ZoneActiveInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneActiveInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(ZoneActiveInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneActiveInfo, _internal_metadata_),
      -1);
  RegVerifiedAccountToGateway_descriptor_ = file->message_type(1);
  static const int RegVerifiedAccountToGateway_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegVerifiedAccountToGateway, acc_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegVerifiedAccountToGateway, login_id_super_),
  };
  RegVerifiedAccountToGateway_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RegVerifiedAccountToGateway_descriptor_,
      RegVerifiedAccountToGateway::default_instance_,
      RegVerifiedAccountToGateway_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegVerifiedAccountToGateway, _has_bits_[0]),
      -1,
      -1,
      sizeof(RegVerifiedAccountToGateway),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegVerifiedAccountToGateway, _internal_metadata_),
      -1);
  ZoneGatewayReady_descriptor_ = file->message_type(2);
  static const int ZoneGatewayReady_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneGatewayReady, acc_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneGatewayReady, login_id_super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneGatewayReady, token_),
  };
  ZoneGatewayReady_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ZoneGatewayReady_descriptor_,
      ZoneGatewayReady::default_instance_,
      ZoneGatewayReady_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneGatewayReady, _has_bits_[0]),
      -1,
      -1,
      sizeof(ZoneGatewayReady),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneGatewayReady, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_super_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ZoneActiveInfo_descriptor_, &ZoneActiveInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RegVerifiedAccountToGateway_descriptor_, &RegVerifiedAccountToGateway::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ZoneGatewayReady_descriptor_, &ZoneGatewayReady::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_super_2eproto() {
  delete ZoneActiveInfo::default_instance_;
  delete ZoneActiveInfo_reflection_;
  delete RegVerifiedAccountToGateway::default_instance_;
  delete RegVerifiedAccountToGateway_reflection_;
  delete ZoneGatewayReady::default_instance_;
  delete ZoneGatewayReady_reflection_;
}

void protobuf_AddDesc_super_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013super.proto\022\014PrivateProto\"-\n\016ZoneActiv"
    "eInfo\022\033\n\023player_load_reserve\030\001 \002(\r\"E\n\033Re"
    "gVerifiedAccountToGateway\022\016\n\006acc_id\030\001 \002("
    "\004\022\026\n\016login_id_super\030\002 \002(\004\"I\n\020ZoneGateway"
    "Ready\022\016\n\006acc_id\030\001 \002(\004\022\026\n\016login_id_super\030"
    "\002 \002(\004\022\r\n\005token\030\003 \002(\004", 220);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "super.proto", &protobuf_RegisterTypes);
  ZoneActiveInfo::default_instance_ = new ZoneActiveInfo();
  RegVerifiedAccountToGateway::default_instance_ = new RegVerifiedAccountToGateway();
  ZoneGatewayReady::default_instance_ = new ZoneGatewayReady();
  ZoneActiveInfo::default_instance_->InitAsDefaultInstance();
  RegVerifiedAccountToGateway::default_instance_->InitAsDefaultInstance();
  ZoneGatewayReady::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_super_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_super_2eproto {
  StaticDescriptorInitializer_super_2eproto() {
    protobuf_AddDesc_super_2eproto();
  }
} static_descriptor_initializer_super_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int ZoneActiveInfo::kPlayerLoadReserveFieldNumber;
#endif  // !_MSC_VER

ZoneActiveInfo::ZoneActiveInfo()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PrivateProto.ZoneActiveInfo)
}

void ZoneActiveInfo::InitAsDefaultInstance() {
}

ZoneActiveInfo::ZoneActiveInfo(const ZoneActiveInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PrivateProto.ZoneActiveInfo)
}

void ZoneActiveInfo::SharedCtor() {
  _cached_size_ = 0;
  player_load_reserve_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZoneActiveInfo::~ZoneActiveInfo() {
  // @@protoc_insertion_point(destructor:PrivateProto.ZoneActiveInfo)
  SharedDtor();
}

void ZoneActiveInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ZoneActiveInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZoneActiveInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZoneActiveInfo_descriptor_;
}

const ZoneActiveInfo& ZoneActiveInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_super_2eproto();
  return *default_instance_;
}

ZoneActiveInfo* ZoneActiveInfo::default_instance_ = NULL;

ZoneActiveInfo* ZoneActiveInfo::New(::google::protobuf::Arena* arena) const {
  ZoneActiveInfo* n = new ZoneActiveInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ZoneActiveInfo::Clear() {
  player_load_reserve_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ZoneActiveInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PrivateProto.ZoneActiveInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 player_load_reserve = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_load_reserve_)));
          set_has_player_load_reserve();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PrivateProto.ZoneActiveInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PrivateProto.ZoneActiveInfo)
  return false;
#undef DO_
}

void ZoneActiveInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PrivateProto.ZoneActiveInfo)
  // required uint32 player_load_reserve = 1;
  if (has_player_load_reserve()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_load_reserve(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PrivateProto.ZoneActiveInfo)
}

::google::protobuf::uint8* ZoneActiveInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PrivateProto.ZoneActiveInfo)
  // required uint32 player_load_reserve = 1;
  if (has_player_load_reserve()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_load_reserve(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PrivateProto.ZoneActiveInfo)
  return target;
}

int ZoneActiveInfo::ByteSize() const {
  int total_size = 0;

  // required uint32 player_load_reserve = 1;
  if (has_player_load_reserve()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_load_reserve());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZoneActiveInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ZoneActiveInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZoneActiveInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZoneActiveInfo::MergeFrom(const ZoneActiveInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_load_reserve()) {
      set_player_load_reserve(from.player_load_reserve());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ZoneActiveInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZoneActiveInfo::CopyFrom(const ZoneActiveInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZoneActiveInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ZoneActiveInfo::Swap(ZoneActiveInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ZoneActiveInfo::InternalSwap(ZoneActiveInfo* other) {
  std::swap(player_load_reserve_, other->player_load_reserve_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ZoneActiveInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZoneActiveInfo_descriptor_;
  metadata.reflection = ZoneActiveInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegVerifiedAccountToGateway::kAccIdFieldNumber;
const int RegVerifiedAccountToGateway::kLoginIdSuperFieldNumber;
#endif  // !_MSC_VER

RegVerifiedAccountToGateway::RegVerifiedAccountToGateway()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PrivateProto.RegVerifiedAccountToGateway)
}

void RegVerifiedAccountToGateway::InitAsDefaultInstance() {
}

RegVerifiedAccountToGateway::RegVerifiedAccountToGateway(const RegVerifiedAccountToGateway& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PrivateProto.RegVerifiedAccountToGateway)
}

void RegVerifiedAccountToGateway::SharedCtor() {
  _cached_size_ = 0;
  acc_id_ = GOOGLE_ULONGLONG(0);
  login_id_super_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegVerifiedAccountToGateway::~RegVerifiedAccountToGateway() {
  // @@protoc_insertion_point(destructor:PrivateProto.RegVerifiedAccountToGateway)
  SharedDtor();
}

void RegVerifiedAccountToGateway::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegVerifiedAccountToGateway::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegVerifiedAccountToGateway::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegVerifiedAccountToGateway_descriptor_;
}

const RegVerifiedAccountToGateway& RegVerifiedAccountToGateway::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_super_2eproto();
  return *default_instance_;
}

RegVerifiedAccountToGateway* RegVerifiedAccountToGateway::default_instance_ = NULL;

RegVerifiedAccountToGateway* RegVerifiedAccountToGateway::New(::google::protobuf::Arena* arena) const {
  RegVerifiedAccountToGateway* n = new RegVerifiedAccountToGateway;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegVerifiedAccountToGateway::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RegVerifiedAccountToGateway*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(acc_id_, login_id_super_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RegVerifiedAccountToGateway::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PrivateProto.RegVerifiedAccountToGateway)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 acc_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &acc_id_)));
          set_has_acc_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_login_id_super;
        break;
      }

      // required uint64 login_id_super = 2;
      case 2: {
        if (tag == 16) {
         parse_login_id_super:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &login_id_super_)));
          set_has_login_id_super();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PrivateProto.RegVerifiedAccountToGateway)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PrivateProto.RegVerifiedAccountToGateway)
  return false;
#undef DO_
}

void RegVerifiedAccountToGateway::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PrivateProto.RegVerifiedAccountToGateway)
  // required uint64 acc_id = 1;
  if (has_acc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->acc_id(), output);
  }

  // required uint64 login_id_super = 2;
  if (has_login_id_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->login_id_super(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PrivateProto.RegVerifiedAccountToGateway)
}

::google::protobuf::uint8* RegVerifiedAccountToGateway::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PrivateProto.RegVerifiedAccountToGateway)
  // required uint64 acc_id = 1;
  if (has_acc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->acc_id(), target);
  }

  // required uint64 login_id_super = 2;
  if (has_login_id_super()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->login_id_super(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PrivateProto.RegVerifiedAccountToGateway)
  return target;
}

int RegVerifiedAccountToGateway::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_acc_id()) {
    // required uint64 acc_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->acc_id());
  }

  if (has_login_id_super()) {
    // required uint64 login_id_super = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->login_id_super());
  }

  return total_size;
}
int RegVerifiedAccountToGateway::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 acc_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->acc_id());

    // required uint64 login_id_super = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->login_id_super());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegVerifiedAccountToGateway::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RegVerifiedAccountToGateway* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegVerifiedAccountToGateway*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegVerifiedAccountToGateway::MergeFrom(const RegVerifiedAccountToGateway& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_acc_id()) {
      set_acc_id(from.acc_id());
    }
    if (from.has_login_id_super()) {
      set_login_id_super(from.login_id_super());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RegVerifiedAccountToGateway::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegVerifiedAccountToGateway::CopyFrom(const RegVerifiedAccountToGateway& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegVerifiedAccountToGateway::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RegVerifiedAccountToGateway::Swap(RegVerifiedAccountToGateway* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegVerifiedAccountToGateway::InternalSwap(RegVerifiedAccountToGateway* other) {
  std::swap(acc_id_, other->acc_id_);
  std::swap(login_id_super_, other->login_id_super_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegVerifiedAccountToGateway::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegVerifiedAccountToGateway_descriptor_;
  metadata.reflection = RegVerifiedAccountToGateway_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZoneGatewayReady::kAccIdFieldNumber;
const int ZoneGatewayReady::kLoginIdSuperFieldNumber;
const int ZoneGatewayReady::kTokenFieldNumber;
#endif  // !_MSC_VER

ZoneGatewayReady::ZoneGatewayReady()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PrivateProto.ZoneGatewayReady)
}

void ZoneGatewayReady::InitAsDefaultInstance() {
}

ZoneGatewayReady::ZoneGatewayReady(const ZoneGatewayReady& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PrivateProto.ZoneGatewayReady)
}

void ZoneGatewayReady::SharedCtor() {
  _cached_size_ = 0;
  acc_id_ = GOOGLE_ULONGLONG(0);
  login_id_super_ = GOOGLE_ULONGLONG(0);
  token_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZoneGatewayReady::~ZoneGatewayReady() {
  // @@protoc_insertion_point(destructor:PrivateProto.ZoneGatewayReady)
  SharedDtor();
}

void ZoneGatewayReady::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ZoneGatewayReady::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZoneGatewayReady::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZoneGatewayReady_descriptor_;
}

const ZoneGatewayReady& ZoneGatewayReady::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_super_2eproto();
  return *default_instance_;
}

ZoneGatewayReady* ZoneGatewayReady::default_instance_ = NULL;

ZoneGatewayReady* ZoneGatewayReady::New(::google::protobuf::Arena* arena) const {
  ZoneGatewayReady* n = new ZoneGatewayReady;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ZoneGatewayReady::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ZoneGatewayReady*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(acc_id_, token_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ZoneGatewayReady::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PrivateProto.ZoneGatewayReady)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 acc_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &acc_id_)));
          set_has_acc_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_login_id_super;
        break;
      }

      // required uint64 login_id_super = 2;
      case 2: {
        if (tag == 16) {
         parse_login_id_super:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &login_id_super_)));
          set_has_login_id_super();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_token;
        break;
      }

      // required uint64 token = 3;
      case 3: {
        if (tag == 24) {
         parse_token:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &token_)));
          set_has_token();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PrivateProto.ZoneGatewayReady)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PrivateProto.ZoneGatewayReady)
  return false;
#undef DO_
}

void ZoneGatewayReady::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PrivateProto.ZoneGatewayReady)
  // required uint64 acc_id = 1;
  if (has_acc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->acc_id(), output);
  }

  // required uint64 login_id_super = 2;
  if (has_login_id_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->login_id_super(), output);
  }

  // required uint64 token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PrivateProto.ZoneGatewayReady)
}

::google::protobuf::uint8* ZoneGatewayReady::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PrivateProto.ZoneGatewayReady)
  // required uint64 acc_id = 1;
  if (has_acc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->acc_id(), target);
  }

  // required uint64 login_id_super = 2;
  if (has_login_id_super()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->login_id_super(), target);
  }

  // required uint64 token = 3;
  if (has_token()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PrivateProto.ZoneGatewayReady)
  return target;
}

int ZoneGatewayReady::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_acc_id()) {
    // required uint64 acc_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->acc_id());
  }

  if (has_login_id_super()) {
    // required uint64 login_id_super = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->login_id_super());
  }

  if (has_token()) {
    // required uint64 token = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->token());
  }

  return total_size;
}
int ZoneGatewayReady::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint64 acc_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->acc_id());

    // required uint64 login_id_super = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->login_id_super());

    // required uint64 token = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->token());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZoneGatewayReady::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ZoneGatewayReady* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZoneGatewayReady*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZoneGatewayReady::MergeFrom(const ZoneGatewayReady& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_acc_id()) {
      set_acc_id(from.acc_id());
    }
    if (from.has_login_id_super()) {
      set_login_id_super(from.login_id_super());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ZoneGatewayReady::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZoneGatewayReady::CopyFrom(const ZoneGatewayReady& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZoneGatewayReady::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ZoneGatewayReady::Swap(ZoneGatewayReady* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ZoneGatewayReady::InternalSwap(ZoneGatewayReady* other) {
  std::swap(acc_id_, other->acc_id_);
  std::swap(login_id_super_, other->login_id_super_);
  std::swap(token_, other->token_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ZoneGatewayReady::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZoneGatewayReady_descriptor_;
  metadata.reflection = ZoneGatewayReady_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PrivateProto

// @@protoc_insertion_point(global_scope)
