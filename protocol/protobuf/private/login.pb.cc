// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: login.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "login.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace PrivateProto {

namespace {

const ::google::protobuf::Descriptor* CheckAccountAndToken_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckAccountAndToken_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserIntoWorld_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserIntoWorld_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetUserIntoWorld_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetUserIntoWorld_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserOffline_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserOffline_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_login_2eproto() {
  protobuf_AddDesc_login_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "login.proto");
  GOOGLE_CHECK(file != NULL);
  CheckAccountAndToken_descriptor_ = file->message_type(0);
  static const int CheckAccountAndToken_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckAccountAndToken, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckAccountAndToken, token_),
  };
  CheckAccountAndToken_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CheckAccountAndToken_descriptor_,
      CheckAccountAndToken::default_instance_,
      CheckAccountAndToken_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckAccountAndToken, _has_bits_[0]),
      -1,
      -1,
      sizeof(CheckAccountAndToken),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckAccountAndToken, _internal_metadata_),
      -1);
  UserIntoWorld_descriptor_ = file->message_type(1);
  static const int UserIntoWorld_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserIntoWorld, rid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserIntoWorld, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserIntoWorld, scene_id_),
  };
  UserIntoWorld_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserIntoWorld_descriptor_,
      UserIntoWorld::default_instance_,
      UserIntoWorld_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserIntoWorld, _has_bits_[0]),
      -1,
      -1,
      sizeof(UserIntoWorld),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserIntoWorld, _internal_metadata_),
      -1);
  RetUserIntoWorld_descriptor_ = file->message_type(2);
  static const int RetUserIntoWorld_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetUserIntoWorld, rid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetUserIntoWorld, is_successful_),
  };
  RetUserIntoWorld_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RetUserIntoWorld_descriptor_,
      RetUserIntoWorld::default_instance_,
      RetUserIntoWorld_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetUserIntoWorld, _has_bits_[0]),
      -1,
      -1,
      sizeof(RetUserIntoWorld),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetUserIntoWorld, _internal_metadata_),
      -1);
  UserOffline_descriptor_ = file->message_type(3);
  static const int UserOffline_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOffline, rid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOffline, reason_),
  };
  UserOffline_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserOffline_descriptor_,
      UserOffline::default_instance_,
      UserOffline_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOffline, _has_bits_[0]),
      -1,
      -1,
      sizeof(UserOffline),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOffline, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_login_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CheckAccountAndToken_descriptor_, &CheckAccountAndToken::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserIntoWorld_descriptor_, &UserIntoWorld::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RetUserIntoWorld_descriptor_, &RetUserIntoWorld::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserOffline_descriptor_, &UserOffline::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_login_2eproto() {
  delete CheckAccountAndToken::default_instance_;
  delete CheckAccountAndToken_reflection_;
  delete UserIntoWorld::default_instance_;
  delete UserIntoWorld_reflection_;
  delete RetUserIntoWorld::default_instance_;
  delete RetUserIntoWorld_reflection_;
  delete UserOffline::default_instance_;
  delete UserOffline_reflection_;
}

void protobuf_AddDesc_login_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013login.proto\022\014PrivateProto\"6\n\024CheckAcco"
    "untAndToken\022\017\n\007account\030\001 \002(\t\022\r\n\005token\030\002 "
    "\002(\r\"\?\n\rUserIntoWorld\022\013\n\003rid\030\001 \002(\004\022\017\n\007acc"
    "ount\030\002 \002(\t\022\020\n\010scene_id\030\003 \002(\r\"6\n\020RetUserI"
    "ntoWorld\022\013\n\003rid\030\001 \002(\004\022\025\n\ris_successful\030\002"
    " \002(\010\"*\n\013UserOffline\022\013\n\003rid\030\001 \002(\004\022\016\n\006reas"
    "on\030\002 \002(\005", 248);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "login.proto", &protobuf_RegisterTypes);
  CheckAccountAndToken::default_instance_ = new CheckAccountAndToken();
  UserIntoWorld::default_instance_ = new UserIntoWorld();
  RetUserIntoWorld::default_instance_ = new RetUserIntoWorld();
  UserOffline::default_instance_ = new UserOffline();
  CheckAccountAndToken::default_instance_->InitAsDefaultInstance();
  UserIntoWorld::default_instance_->InitAsDefaultInstance();
  RetUserIntoWorld::default_instance_->InitAsDefaultInstance();
  UserOffline::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_login_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_login_2eproto {
  StaticDescriptorInitializer_login_2eproto() {
    protobuf_AddDesc_login_2eproto();
  }
} static_descriptor_initializer_login_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int CheckAccountAndToken::kAccountFieldNumber;
const int CheckAccountAndToken::kTokenFieldNumber;
#endif  // !_MSC_VER

CheckAccountAndToken::CheckAccountAndToken()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PrivateProto.CheckAccountAndToken)
}

void CheckAccountAndToken::InitAsDefaultInstance() {
}

CheckAccountAndToken::CheckAccountAndToken(const CheckAccountAndToken& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PrivateProto.CheckAccountAndToken)
}

void CheckAccountAndToken::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckAccountAndToken::~CheckAccountAndToken() {
  // @@protoc_insertion_point(destructor:PrivateProto.CheckAccountAndToken)
  SharedDtor();
}

void CheckAccountAndToken::SharedDtor() {
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CheckAccountAndToken::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckAccountAndToken::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckAccountAndToken_descriptor_;
}

const CheckAccountAndToken& CheckAccountAndToken::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

CheckAccountAndToken* CheckAccountAndToken::default_instance_ = NULL;

CheckAccountAndToken* CheckAccountAndToken::New(::google::protobuf::Arena* arena) const {
  CheckAccountAndToken* n = new CheckAccountAndToken;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CheckAccountAndToken::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_account()) {
      account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    token_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CheckAccountAndToken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PrivateProto.CheckAccountAndToken)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string account = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "PrivateProto.CheckAccountAndToken.account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_token;
        break;
      }

      // required uint32 token = 2;
      case 2: {
        if (tag == 16) {
         parse_token:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &token_)));
          set_has_token();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PrivateProto.CheckAccountAndToken)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PrivateProto.CheckAccountAndToken)
  return false;
#undef DO_
}

void CheckAccountAndToken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PrivateProto.CheckAccountAndToken)
  // required string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PrivateProto.CheckAccountAndToken.account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->account(), output);
  }

  // required uint32 token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PrivateProto.CheckAccountAndToken)
}

::google::protobuf::uint8* CheckAccountAndToken::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PrivateProto.CheckAccountAndToken)
  // required string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PrivateProto.CheckAccountAndToken.account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // required uint32 token = 2;
  if (has_token()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PrivateProto.CheckAccountAndToken)
  return target;
}

int CheckAccountAndToken::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_account()) {
    // required string account = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account());
  }

  if (has_token()) {
    // required uint32 token = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->token());
  }

  return total_size;
}
int CheckAccountAndToken::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string account = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account());

    // required uint32 token = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->token());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckAccountAndToken::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CheckAccountAndToken* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckAccountAndToken*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckAccountAndToken::MergeFrom(const CheckAccountAndToken& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_has_account();
      account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CheckAccountAndToken::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckAccountAndToken::CopyFrom(const CheckAccountAndToken& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckAccountAndToken::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CheckAccountAndToken::Swap(CheckAccountAndToken* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckAccountAndToken::InternalSwap(CheckAccountAndToken* other) {
  account_.Swap(&other->account_);
  std::swap(token_, other->token_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CheckAccountAndToken::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckAccountAndToken_descriptor_;
  metadata.reflection = CheckAccountAndToken_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserIntoWorld::kRidFieldNumber;
const int UserIntoWorld::kAccountFieldNumber;
const int UserIntoWorld::kSceneIdFieldNumber;
#endif  // !_MSC_VER

UserIntoWorld::UserIntoWorld()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PrivateProto.UserIntoWorld)
}

void UserIntoWorld::InitAsDefaultInstance() {
}

UserIntoWorld::UserIntoWorld(const UserIntoWorld& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PrivateProto.UserIntoWorld)
}

void UserIntoWorld::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  rid_ = GOOGLE_ULONGLONG(0);
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scene_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserIntoWorld::~UserIntoWorld() {
  // @@protoc_insertion_point(destructor:PrivateProto.UserIntoWorld)
  SharedDtor();
}

void UserIntoWorld::SharedDtor() {
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void UserIntoWorld::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserIntoWorld::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserIntoWorld_descriptor_;
}

const UserIntoWorld& UserIntoWorld::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

UserIntoWorld* UserIntoWorld::default_instance_ = NULL;

UserIntoWorld* UserIntoWorld::New(::google::protobuf::Arena* arena) const {
  UserIntoWorld* n = new UserIntoWorld;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserIntoWorld::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    rid_ = GOOGLE_ULONGLONG(0);
    if (has_account()) {
      account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    scene_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UserIntoWorld::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PrivateProto.UserIntoWorld)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 rid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rid_)));
          set_has_rid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // required string account = 2;
      case 2: {
        if (tag == 18) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "PrivateProto.UserIntoWorld.account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_scene_id;
        break;
      }

      // required uint32 scene_id = 3;
      case 3: {
        if (tag == 24) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PrivateProto.UserIntoWorld)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PrivateProto.UserIntoWorld)
  return false;
#undef DO_
}

void UserIntoWorld::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PrivateProto.UserIntoWorld)
  // required uint64 rid = 1;
  if (has_rid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->rid(), output);
  }

  // required string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PrivateProto.UserIntoWorld.account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->account(), output);
  }

  // required uint32 scene_id = 3;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->scene_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PrivateProto.UserIntoWorld)
}

::google::protobuf::uint8* UserIntoWorld::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PrivateProto.UserIntoWorld)
  // required uint64 rid = 1;
  if (has_rid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->rid(), target);
  }

  // required string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PrivateProto.UserIntoWorld.account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // required uint32 scene_id = 3;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->scene_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PrivateProto.UserIntoWorld)
  return target;
}

int UserIntoWorld::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_rid()) {
    // required uint64 rid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->rid());
  }

  if (has_account()) {
    // required string account = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account());
  }

  if (has_scene_id()) {
    // required uint32 scene_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene_id());
  }

  return total_size;
}
int UserIntoWorld::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint64 rid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->rid());

    // required string account = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account());

    // required uint32 scene_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserIntoWorld::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UserIntoWorld* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserIntoWorld*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserIntoWorld::MergeFrom(const UserIntoWorld& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rid()) {
      set_rid(from.rid());
    }
    if (from.has_account()) {
      set_has_account();
      account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void UserIntoWorld::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserIntoWorld::CopyFrom(const UserIntoWorld& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserIntoWorld::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void UserIntoWorld::Swap(UserIntoWorld* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserIntoWorld::InternalSwap(UserIntoWorld* other) {
  std::swap(rid_, other->rid_);
  account_.Swap(&other->account_);
  std::swap(scene_id_, other->scene_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserIntoWorld::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserIntoWorld_descriptor_;
  metadata.reflection = UserIntoWorld_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetUserIntoWorld::kRidFieldNumber;
const int RetUserIntoWorld::kIsSuccessfulFieldNumber;
#endif  // !_MSC_VER

RetUserIntoWorld::RetUserIntoWorld()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PrivateProto.RetUserIntoWorld)
}

void RetUserIntoWorld::InitAsDefaultInstance() {
}

RetUserIntoWorld::RetUserIntoWorld(const RetUserIntoWorld& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PrivateProto.RetUserIntoWorld)
}

void RetUserIntoWorld::SharedCtor() {
  _cached_size_ = 0;
  rid_ = GOOGLE_ULONGLONG(0);
  is_successful_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetUserIntoWorld::~RetUserIntoWorld() {
  // @@protoc_insertion_point(destructor:PrivateProto.RetUserIntoWorld)
  SharedDtor();
}

void RetUserIntoWorld::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetUserIntoWorld::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetUserIntoWorld::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetUserIntoWorld_descriptor_;
}

const RetUserIntoWorld& RetUserIntoWorld::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

RetUserIntoWorld* RetUserIntoWorld::default_instance_ = NULL;

RetUserIntoWorld* RetUserIntoWorld::New(::google::protobuf::Arena* arena) const {
  RetUserIntoWorld* n = new RetUserIntoWorld;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RetUserIntoWorld::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RetUserIntoWorld*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(rid_, is_successful_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RetUserIntoWorld::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PrivateProto.RetUserIntoWorld)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 rid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rid_)));
          set_has_rid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_successful;
        break;
      }

      // required bool is_successful = 2;
      case 2: {
        if (tag == 16) {
         parse_is_successful:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_successful_)));
          set_has_is_successful();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PrivateProto.RetUserIntoWorld)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PrivateProto.RetUserIntoWorld)
  return false;
#undef DO_
}

void RetUserIntoWorld::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PrivateProto.RetUserIntoWorld)
  // required uint64 rid = 1;
  if (has_rid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->rid(), output);
  }

  // required bool is_successful = 2;
  if (has_is_successful()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_successful(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PrivateProto.RetUserIntoWorld)
}

::google::protobuf::uint8* RetUserIntoWorld::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PrivateProto.RetUserIntoWorld)
  // required uint64 rid = 1;
  if (has_rid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->rid(), target);
  }

  // required bool is_successful = 2;
  if (has_is_successful()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_successful(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PrivateProto.RetUserIntoWorld)
  return target;
}

int RetUserIntoWorld::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_rid()) {
    // required uint64 rid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->rid());
  }

  if (has_is_successful()) {
    // required bool is_successful = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
int RetUserIntoWorld::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 rid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->rid());

    // required bool is_successful = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetUserIntoWorld::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RetUserIntoWorld* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetUserIntoWorld*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetUserIntoWorld::MergeFrom(const RetUserIntoWorld& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rid()) {
      set_rid(from.rid());
    }
    if (from.has_is_successful()) {
      set_is_successful(from.is_successful());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RetUserIntoWorld::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetUserIntoWorld::CopyFrom(const RetUserIntoWorld& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetUserIntoWorld::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RetUserIntoWorld::Swap(RetUserIntoWorld* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RetUserIntoWorld::InternalSwap(RetUserIntoWorld* other) {
  std::swap(rid_, other->rid_);
  std::swap(is_successful_, other->is_successful_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RetUserIntoWorld::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetUserIntoWorld_descriptor_;
  metadata.reflection = RetUserIntoWorld_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserOffline::kRidFieldNumber;
const int UserOffline::kReasonFieldNumber;
#endif  // !_MSC_VER

UserOffline::UserOffline()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PrivateProto.UserOffline)
}

void UserOffline::InitAsDefaultInstance() {
}

UserOffline::UserOffline(const UserOffline& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PrivateProto.UserOffline)
}

void UserOffline::SharedCtor() {
  _cached_size_ = 0;
  rid_ = GOOGLE_ULONGLONG(0);
  reason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserOffline::~UserOffline() {
  // @@protoc_insertion_point(destructor:PrivateProto.UserOffline)
  SharedDtor();
}

void UserOffline::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserOffline::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserOffline::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserOffline_descriptor_;
}

const UserOffline& UserOffline::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

UserOffline* UserOffline::default_instance_ = NULL;

UserOffline* UserOffline::New(::google::protobuf::Arena* arena) const {
  UserOffline* n = new UserOffline;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserOffline::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserOffline*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(rid_, reason_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UserOffline::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PrivateProto.UserOffline)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 rid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rid_)));
          set_has_rid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_reason;
        break;
      }

      // required int32 reason = 2;
      case 2: {
        if (tag == 16) {
         parse_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PrivateProto.UserOffline)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PrivateProto.UserOffline)
  return false;
#undef DO_
}

void UserOffline::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PrivateProto.UserOffline)
  // required uint64 rid = 1;
  if (has_rid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->rid(), output);
  }

  // required int32 reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PrivateProto.UserOffline)
}

::google::protobuf::uint8* UserOffline::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PrivateProto.UserOffline)
  // required uint64 rid = 1;
  if (has_rid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->rid(), target);
  }

  // required int32 reason = 2;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PrivateProto.UserOffline)
  return target;
}

int UserOffline::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_rid()) {
    // required uint64 rid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->rid());
  }

  if (has_reason()) {
    // required int32 reason = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->reason());
  }

  return total_size;
}
int UserOffline::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 rid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->rid());

    // required int32 reason = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->reason());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserOffline::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UserOffline* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserOffline*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserOffline::MergeFrom(const UserOffline& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rid()) {
      set_rid(from.rid());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void UserOffline::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserOffline::CopyFrom(const UserOffline& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserOffline::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UserOffline::Swap(UserOffline* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserOffline::InternalSwap(UserOffline* other) {
  std::swap(rid_, other->rid_);
  std::swap(reason_, other->reason_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserOffline::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserOffline_descriptor_;
  metadata.reflection = UserOffline_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PrivateProto

// @@protoc_insertion_point(global_scope)
