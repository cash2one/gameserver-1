// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: login.proto

#ifndef PROTOBUF_login_2eproto__INCLUDED
#define PROTOBUF_login_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace PrivateProto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_login_2eproto();
void protobuf_AssignDesc_login_2eproto();
void protobuf_ShutdownFile_login_2eproto();

class CheckAccountAndToken;
class UserIntoWorld;
class RetUserIntoWorld;
class UserOffline;

// ===================================================================

class CheckAccountAndToken : public ::google::protobuf::Message {
 public:
  CheckAccountAndToken();
  virtual ~CheckAccountAndToken();

  CheckAccountAndToken(const CheckAccountAndToken& from);

  inline CheckAccountAndToken& operator=(const CheckAccountAndToken& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckAccountAndToken& default_instance();

  void Swap(CheckAccountAndToken* other);

  // implements Message ----------------------------------------------

  inline CheckAccountAndToken* New() const { return New(NULL); }

  CheckAccountAndToken* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CheckAccountAndToken& from);
  void MergeFrom(const CheckAccountAndToken& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CheckAccountAndToken* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // required uint32 token = 2;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 2;
  inline ::google::protobuf::uint32 token() const;
  inline void set_token(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PrivateProto.CheckAccountAndToken)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_token();
  inline void clear_has_token();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::uint32 token_;
  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static CheckAccountAndToken* default_instance_;
};
// -------------------------------------------------------------------

class UserIntoWorld : public ::google::protobuf::Message {
 public:
  UserIntoWorld();
  virtual ~UserIntoWorld();

  UserIntoWorld(const UserIntoWorld& from);

  inline UserIntoWorld& operator=(const UserIntoWorld& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserIntoWorld& default_instance();

  void Swap(UserIntoWorld* other);

  // implements Message ----------------------------------------------

  inline UserIntoWorld* New() const { return New(NULL); }

  UserIntoWorld* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserIntoWorld& from);
  void MergeFrom(const UserIntoWorld& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserIntoWorld* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 rid = 1;
  inline bool has_rid() const;
  inline void clear_rid();
  static const int kRidFieldNumber = 1;
  inline ::google::protobuf::uint64 rid() const;
  inline void set_rid(::google::protobuf::uint64 value);

  // required string account = 2;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 2;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // required uint32 scene_id = 3;
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 3;
  inline ::google::protobuf::uint32 scene_id() const;
  inline void set_scene_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PrivateProto.UserIntoWorld)
 private:
  inline void set_has_rid();
  inline void clear_has_rid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_scene_id();
  inline void clear_has_scene_id();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 rid_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::uint32 scene_id_;
  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static UserIntoWorld* default_instance_;
};
// -------------------------------------------------------------------

class RetUserIntoWorld : public ::google::protobuf::Message {
 public:
  RetUserIntoWorld();
  virtual ~RetUserIntoWorld();

  RetUserIntoWorld(const RetUserIntoWorld& from);

  inline RetUserIntoWorld& operator=(const RetUserIntoWorld& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RetUserIntoWorld& default_instance();

  void Swap(RetUserIntoWorld* other);

  // implements Message ----------------------------------------------

  inline RetUserIntoWorld* New() const { return New(NULL); }

  RetUserIntoWorld* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RetUserIntoWorld& from);
  void MergeFrom(const RetUserIntoWorld& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RetUserIntoWorld* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 rid = 1;
  inline bool has_rid() const;
  inline void clear_rid();
  static const int kRidFieldNumber = 1;
  inline ::google::protobuf::uint64 rid() const;
  inline void set_rid(::google::protobuf::uint64 value);

  // required bool is_successful = 2;
  inline bool has_is_successful() const;
  inline void clear_is_successful();
  static const int kIsSuccessfulFieldNumber = 2;
  inline bool is_successful() const;
  inline void set_is_successful(bool value);

  // @@protoc_insertion_point(class_scope:PrivateProto.RetUserIntoWorld)
 private:
  inline void set_has_rid();
  inline void clear_has_rid();
  inline void set_has_is_successful();
  inline void clear_has_is_successful();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 rid_;
  bool is_successful_;
  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static RetUserIntoWorld* default_instance_;
};
// -------------------------------------------------------------------

class UserOffline : public ::google::protobuf::Message {
 public:
  UserOffline();
  virtual ~UserOffline();

  UserOffline(const UserOffline& from);

  inline UserOffline& operator=(const UserOffline& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserOffline& default_instance();

  void Swap(UserOffline* other);

  // implements Message ----------------------------------------------

  inline UserOffline* New() const { return New(NULL); }

  UserOffline* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserOffline& from);
  void MergeFrom(const UserOffline& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserOffline* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 rid = 1;
  inline bool has_rid() const;
  inline void clear_rid();
  static const int kRidFieldNumber = 1;
  inline ::google::protobuf::uint64 rid() const;
  inline void set_rid(::google::protobuf::uint64 value);

  // required int32 reason = 2;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 2;
  inline ::google::protobuf::int32 reason() const;
  inline void set_reason(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PrivateProto.UserOffline)
 private:
  inline void set_has_rid();
  inline void clear_has_rid();
  inline void set_has_reason();
  inline void clear_has_reason();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 rid_;
  ::google::protobuf::int32 reason_;
  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static UserOffline* default_instance_;
};
// ===================================================================


// ===================================================================

// CheckAccountAndToken

// required string account = 1;
inline bool CheckAccountAndToken::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CheckAccountAndToken::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CheckAccountAndToken::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CheckAccountAndToken::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account();
}
inline const ::std::string& CheckAccountAndToken::account() const {
  // @@protoc_insertion_point(field_get:PrivateProto.CheckAccountAndToken.account)
  return account_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckAccountAndToken::set_account(const ::std::string& value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PrivateProto.CheckAccountAndToken.account)
}
inline void CheckAccountAndToken::set_account(const char* value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PrivateProto.CheckAccountAndToken.account)
}
inline void CheckAccountAndToken::set_account(const char* value, size_t size) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PrivateProto.CheckAccountAndToken.account)
}
inline ::std::string* CheckAccountAndToken::mutable_account() {
  set_has_account();
  // @@protoc_insertion_point(field_mutable:PrivateProto.CheckAccountAndToken.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckAccountAndToken::release_account() {
  clear_has_account();
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckAccountAndToken::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    set_has_account();
  } else {
    clear_has_account();
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:PrivateProto.CheckAccountAndToken.account)
}

// required uint32 token = 2;
inline bool CheckAccountAndToken::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CheckAccountAndToken::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CheckAccountAndToken::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CheckAccountAndToken::clear_token() {
  token_ = 0u;
  clear_has_token();
}
inline ::google::protobuf::uint32 CheckAccountAndToken::token() const {
  // @@protoc_insertion_point(field_get:PrivateProto.CheckAccountAndToken.token)
  return token_;
}
inline void CheckAccountAndToken::set_token(::google::protobuf::uint32 value) {
  set_has_token();
  token_ = value;
  // @@protoc_insertion_point(field_set:PrivateProto.CheckAccountAndToken.token)
}

// -------------------------------------------------------------------

// UserIntoWorld

// required uint64 rid = 1;
inline bool UserIntoWorld::has_rid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserIntoWorld::set_has_rid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserIntoWorld::clear_has_rid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserIntoWorld::clear_rid() {
  rid_ = GOOGLE_ULONGLONG(0);
  clear_has_rid();
}
inline ::google::protobuf::uint64 UserIntoWorld::rid() const {
  // @@protoc_insertion_point(field_get:PrivateProto.UserIntoWorld.rid)
  return rid_;
}
inline void UserIntoWorld::set_rid(::google::protobuf::uint64 value) {
  set_has_rid();
  rid_ = value;
  // @@protoc_insertion_point(field_set:PrivateProto.UserIntoWorld.rid)
}

// required string account = 2;
inline bool UserIntoWorld::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserIntoWorld::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserIntoWorld::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserIntoWorld::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account();
}
inline const ::std::string& UserIntoWorld::account() const {
  // @@protoc_insertion_point(field_get:PrivateProto.UserIntoWorld.account)
  return account_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserIntoWorld::set_account(const ::std::string& value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PrivateProto.UserIntoWorld.account)
}
inline void UserIntoWorld::set_account(const char* value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PrivateProto.UserIntoWorld.account)
}
inline void UserIntoWorld::set_account(const char* value, size_t size) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PrivateProto.UserIntoWorld.account)
}
inline ::std::string* UserIntoWorld::mutable_account() {
  set_has_account();
  // @@protoc_insertion_point(field_mutable:PrivateProto.UserIntoWorld.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserIntoWorld::release_account() {
  clear_has_account();
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserIntoWorld::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    set_has_account();
  } else {
    clear_has_account();
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:PrivateProto.UserIntoWorld.account)
}

// required uint32 scene_id = 3;
inline bool UserIntoWorld::has_scene_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserIntoWorld::set_has_scene_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserIntoWorld::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserIntoWorld::clear_scene_id() {
  scene_id_ = 0u;
  clear_has_scene_id();
}
inline ::google::protobuf::uint32 UserIntoWorld::scene_id() const {
  // @@protoc_insertion_point(field_get:PrivateProto.UserIntoWorld.scene_id)
  return scene_id_;
}
inline void UserIntoWorld::set_scene_id(::google::protobuf::uint32 value) {
  set_has_scene_id();
  scene_id_ = value;
  // @@protoc_insertion_point(field_set:PrivateProto.UserIntoWorld.scene_id)
}

// -------------------------------------------------------------------

// RetUserIntoWorld

// required uint64 rid = 1;
inline bool RetUserIntoWorld::has_rid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RetUserIntoWorld::set_has_rid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RetUserIntoWorld::clear_has_rid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RetUserIntoWorld::clear_rid() {
  rid_ = GOOGLE_ULONGLONG(0);
  clear_has_rid();
}
inline ::google::protobuf::uint64 RetUserIntoWorld::rid() const {
  // @@protoc_insertion_point(field_get:PrivateProto.RetUserIntoWorld.rid)
  return rid_;
}
inline void RetUserIntoWorld::set_rid(::google::protobuf::uint64 value) {
  set_has_rid();
  rid_ = value;
  // @@protoc_insertion_point(field_set:PrivateProto.RetUserIntoWorld.rid)
}

// required bool is_successful = 2;
inline bool RetUserIntoWorld::has_is_successful() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RetUserIntoWorld::set_has_is_successful() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RetUserIntoWorld::clear_has_is_successful() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RetUserIntoWorld::clear_is_successful() {
  is_successful_ = false;
  clear_has_is_successful();
}
inline bool RetUserIntoWorld::is_successful() const {
  // @@protoc_insertion_point(field_get:PrivateProto.RetUserIntoWorld.is_successful)
  return is_successful_;
}
inline void RetUserIntoWorld::set_is_successful(bool value) {
  set_has_is_successful();
  is_successful_ = value;
  // @@protoc_insertion_point(field_set:PrivateProto.RetUserIntoWorld.is_successful)
}

// -------------------------------------------------------------------

// UserOffline

// required uint64 rid = 1;
inline bool UserOffline::has_rid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserOffline::set_has_rid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserOffline::clear_has_rid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserOffline::clear_rid() {
  rid_ = GOOGLE_ULONGLONG(0);
  clear_has_rid();
}
inline ::google::protobuf::uint64 UserOffline::rid() const {
  // @@protoc_insertion_point(field_get:PrivateProto.UserOffline.rid)
  return rid_;
}
inline void UserOffline::set_rid(::google::protobuf::uint64 value) {
  set_has_rid();
  rid_ = value;
  // @@protoc_insertion_point(field_set:PrivateProto.UserOffline.rid)
}

// required int32 reason = 2;
inline bool UserOffline::has_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserOffline::set_has_reason() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserOffline::clear_has_reason() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserOffline::clear_reason() {
  reason_ = 0;
  clear_has_reason();
}
inline ::google::protobuf::int32 UserOffline::reason() const {
  // @@protoc_insertion_point(field_get:PrivateProto.UserOffline.reason)
  return reason_;
}
inline void UserOffline::set_reason(::google::protobuf::int32 value) {
  set_has_reason();
  reason_ = value;
  // @@protoc_insertion_point(field_set:PrivateProto.UserOffline.reason)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PrivateProto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_login_2eproto__INCLUDED
