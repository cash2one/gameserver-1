// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: account.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "account.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace PublicProto {

namespace {

const ::google::protobuf::Descriptor* C_FastSignUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C_FastSignUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* C_SignUpWithAccount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C_SignUpWithAccount_reflection_ = NULL;
const ::google::protobuf::Descriptor* S_SignUpRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S_SignUpRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* C_LoginByAccount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C_LoginByAccount_reflection_ = NULL;
const ::google::protobuf::Descriptor* C_FastLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C_FastLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* S_LoginRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S_LoginRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* C_SelectPlatform_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C_SelectPlatform_reflection_ = NULL;
const ::google::protobuf::Descriptor* S_SelectPlatformRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S_SelectPlatformRet_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_account_2eproto() {
  protobuf_AddDesc_account_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "account.proto");
  GOOGLE_CHECK(file != NULL);
  C_FastSignUp_descriptor_ = file->message_type(0);
  static const int C_FastSignUp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C_FastSignUp, device_),
  };
  C_FastSignUp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      C_FastSignUp_descriptor_,
      C_FastSignUp::default_instance_,
      C_FastSignUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C_FastSignUp, _has_bits_[0]),
      -1,
      -1,
      sizeof(C_FastSignUp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C_FastSignUp, _internal_metadata_),
      -1);
  C_SignUpWithAccount_descriptor_ = file->message_type(1);
  static const int C_SignUpWithAccount_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C_SignUpWithAccount, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C_SignUpWithAccount, password_),
  };
  C_SignUpWithAccount_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      C_SignUpWithAccount_descriptor_,
      C_SignUpWithAccount::default_instance_,
      C_SignUpWithAccount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C_SignUpWithAccount, _has_bits_[0]),
      -1,
      -1,
      sizeof(C_SignUpWithAccount),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C_SignUpWithAccount, _internal_metadata_),
      -1);
  S_SignUpRet_descriptor_ = file->message_type(2);
  static const int S_SignUpRet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_SignUpRet, acc_id_),
  };
  S_SignUpRet_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      S_SignUpRet_descriptor_,
      S_SignUpRet::default_instance_,
      S_SignUpRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_SignUpRet, _has_bits_[0]),
      -1,
      -1,
      sizeof(S_SignUpRet),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_SignUpRet, _internal_metadata_),
      -1);
  C_LoginByAccount_descriptor_ = file->message_type(3);
  static const int C_LoginByAccount_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C_LoginByAccount, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C_LoginByAccount, password_),
  };
  C_LoginByAccount_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      C_LoginByAccount_descriptor_,
      C_LoginByAccount::default_instance_,
      C_LoginByAccount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C_LoginByAccount, _has_bits_[0]),
      -1,
      -1,
      sizeof(C_LoginByAccount),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C_LoginByAccount, _internal_metadata_),
      -1);
  C_FastLogin_descriptor_ = file->message_type(4);
  static const int C_FastLogin_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C_FastLogin, acc_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C_FastLogin, device_),
  };
  C_FastLogin_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      C_FastLogin_descriptor_,
      C_FastLogin::default_instance_,
      C_FastLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C_FastLogin, _has_bits_[0]),
      -1,
      -1,
      sizeof(C_FastLogin),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C_FastLogin, _internal_metadata_),
      -1);
  S_LoginRet_descriptor_ = file->message_type(5);
  static const int S_LoginRet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_LoginRet, acc_id_),
  };
  S_LoginRet_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      S_LoginRet_descriptor_,
      S_LoginRet::default_instance_,
      S_LoginRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_LoginRet, _has_bits_[0]),
      -1,
      -1,
      sizeof(S_LoginRet),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_LoginRet, _internal_metadata_),
      -1);
  C_SelectPlatform_descriptor_ = file->message_type(6);
  static const int C_SelectPlatform_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C_SelectPlatform, platform_),
  };
  C_SelectPlatform_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      C_SelectPlatform_descriptor_,
      C_SelectPlatform::default_instance_,
      C_SelectPlatform_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C_SelectPlatform, _has_bits_[0]),
      -1,
      -1,
      sizeof(C_SelectPlatform),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C_SelectPlatform, _internal_metadata_),
      -1);
  S_SelectPlatformRet_descriptor_ = file->message_type(7);
  static const int S_SelectPlatformRet_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_SelectPlatformRet, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_SelectPlatformRet, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_SelectPlatformRet, token_),
  };
  S_SelectPlatformRet_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      S_SelectPlatformRet_descriptor_,
      S_SelectPlatformRet::default_instance_,
      S_SelectPlatformRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_SelectPlatformRet, _has_bits_[0]),
      -1,
      -1,
      sizeof(S_SelectPlatformRet),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_SelectPlatformRet, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_account_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      C_FastSignUp_descriptor_, &C_FastSignUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      C_SignUpWithAccount_descriptor_, &C_SignUpWithAccount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      S_SignUpRet_descriptor_, &S_SignUpRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      C_LoginByAccount_descriptor_, &C_LoginByAccount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      C_FastLogin_descriptor_, &C_FastLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      S_LoginRet_descriptor_, &S_LoginRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      C_SelectPlatform_descriptor_, &C_SelectPlatform::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      S_SelectPlatformRet_descriptor_, &S_SelectPlatformRet::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_account_2eproto() {
  delete C_FastSignUp::default_instance_;
  delete C_FastSignUp_reflection_;
  delete C_SignUpWithAccount::default_instance_;
  delete C_SignUpWithAccount_reflection_;
  delete S_SignUpRet::default_instance_;
  delete S_SignUpRet_reflection_;
  delete C_LoginByAccount::default_instance_;
  delete C_LoginByAccount_reflection_;
  delete C_FastLogin::default_instance_;
  delete C_FastLogin_reflection_;
  delete S_LoginRet::default_instance_;
  delete S_LoginRet_reflection_;
  delete C_SelectPlatform::default_instance_;
  delete C_SelectPlatform_reflection_;
  delete S_SelectPlatformRet::default_instance_;
  delete S_SelectPlatformRet_reflection_;
}

void protobuf_AddDesc_account_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\raccount.proto\022\013PublicProto\"\036\n\014C_FastSi"
    "gnUp\022\016\n\006device\030\001 \002(\t\"8\n\023C_SignUpWithAcco"
    "unt\022\017\n\007account\030\001 \002(\t\022\020\n\010password\030\002 \002(\t\"\035"
    "\n\013S_SignUpRet\022\016\n\006acc_id\030\001 \002(\r\"5\n\020C_Login"
    "ByAccount\022\017\n\007account\030\002 \002(\t\022\020\n\010password\030\003"
    " \002(\t\"-\n\013C_FastLogin\022\016\n\006acc_id\030\001 \002(\004\022\016\n\006d"
    "evice\030\002 \002(\t\"\034\n\nS_LoginRet\022\016\n\006acc_id\030\001 \002("
    "\004\"$\n\020C_SelectPlatform\022\020\n\010platform\030\001 \002(\r\""
    ">\n\023S_SelectPlatformRet\022\n\n\002ip\030\001 \002(\r\022\014\n\004po"
    "rt\030\002 \002(\r\022\r\n\005token\030\003 \002(\004", 383);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "account.proto", &protobuf_RegisterTypes);
  C_FastSignUp::default_instance_ = new C_FastSignUp();
  C_SignUpWithAccount::default_instance_ = new C_SignUpWithAccount();
  S_SignUpRet::default_instance_ = new S_SignUpRet();
  C_LoginByAccount::default_instance_ = new C_LoginByAccount();
  C_FastLogin::default_instance_ = new C_FastLogin();
  S_LoginRet::default_instance_ = new S_LoginRet();
  C_SelectPlatform::default_instance_ = new C_SelectPlatform();
  S_SelectPlatformRet::default_instance_ = new S_SelectPlatformRet();
  C_FastSignUp::default_instance_->InitAsDefaultInstance();
  C_SignUpWithAccount::default_instance_->InitAsDefaultInstance();
  S_SignUpRet::default_instance_->InitAsDefaultInstance();
  C_LoginByAccount::default_instance_->InitAsDefaultInstance();
  C_FastLogin::default_instance_->InitAsDefaultInstance();
  S_LoginRet::default_instance_->InitAsDefaultInstance();
  C_SelectPlatform::default_instance_->InitAsDefaultInstance();
  S_SelectPlatformRet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_account_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_account_2eproto {
  StaticDescriptorInitializer_account_2eproto() {
    protobuf_AddDesc_account_2eproto();
  }
} static_descriptor_initializer_account_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int C_FastSignUp::kDeviceFieldNumber;
#endif  // !_MSC_VER

C_FastSignUp::C_FastSignUp()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PublicProto.C_FastSignUp)
}

void C_FastSignUp::InitAsDefaultInstance() {
}

C_FastSignUp::C_FastSignUp(const C_FastSignUp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PublicProto.C_FastSignUp)
}

void C_FastSignUp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C_FastSignUp::~C_FastSignUp() {
  // @@protoc_insertion_point(destructor:PublicProto.C_FastSignUp)
  SharedDtor();
}

void C_FastSignUp::SharedDtor() {
  device_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void C_FastSignUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C_FastSignUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C_FastSignUp_descriptor_;
}

const C_FastSignUp& C_FastSignUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_2eproto();
  return *default_instance_;
}

C_FastSignUp* C_FastSignUp::default_instance_ = NULL;

C_FastSignUp* C_FastSignUp::New(::google::protobuf::Arena* arena) const {
  C_FastSignUp* n = new C_FastSignUp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void C_FastSignUp::Clear() {
  if (has_device()) {
    device_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool C_FastSignUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PublicProto.C_FastSignUp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string device = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device().data(), this->device().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "PublicProto.C_FastSignUp.device");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PublicProto.C_FastSignUp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PublicProto.C_FastSignUp)
  return false;
#undef DO_
}

void C_FastSignUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PublicProto.C_FastSignUp)
  // required string device = 1;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PublicProto.C_FastSignUp.device");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->device(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PublicProto.C_FastSignUp)
}

::google::protobuf::uint8* C_FastSignUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PublicProto.C_FastSignUp)
  // required string device = 1;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PublicProto.C_FastSignUp.device");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PublicProto.C_FastSignUp)
  return target;
}

int C_FastSignUp::ByteSize() const {
  int total_size = 0;

  // required string device = 1;
  if (has_device()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C_FastSignUp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const C_FastSignUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C_FastSignUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C_FastSignUp::MergeFrom(const C_FastSignUp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device()) {
      set_has_device();
      device_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void C_FastSignUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_FastSignUp::CopyFrom(const C_FastSignUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_FastSignUp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C_FastSignUp::Swap(C_FastSignUp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void C_FastSignUp::InternalSwap(C_FastSignUp* other) {
  device_.Swap(&other->device_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata C_FastSignUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C_FastSignUp_descriptor_;
  metadata.reflection = C_FastSignUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C_SignUpWithAccount::kAccountFieldNumber;
const int C_SignUpWithAccount::kPasswordFieldNumber;
#endif  // !_MSC_VER

C_SignUpWithAccount::C_SignUpWithAccount()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PublicProto.C_SignUpWithAccount)
}

void C_SignUpWithAccount::InitAsDefaultInstance() {
}

C_SignUpWithAccount::C_SignUpWithAccount(const C_SignUpWithAccount& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PublicProto.C_SignUpWithAccount)
}

void C_SignUpWithAccount::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C_SignUpWithAccount::~C_SignUpWithAccount() {
  // @@protoc_insertion_point(destructor:PublicProto.C_SignUpWithAccount)
  SharedDtor();
}

void C_SignUpWithAccount::SharedDtor() {
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void C_SignUpWithAccount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C_SignUpWithAccount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C_SignUpWithAccount_descriptor_;
}

const C_SignUpWithAccount& C_SignUpWithAccount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_2eproto();
  return *default_instance_;
}

C_SignUpWithAccount* C_SignUpWithAccount::default_instance_ = NULL;

C_SignUpWithAccount* C_SignUpWithAccount::New(::google::protobuf::Arena* arena) const {
  C_SignUpWithAccount* n = new C_SignUpWithAccount;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void C_SignUpWithAccount::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_account()) {
      account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_password()) {
      password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool C_SignUpWithAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PublicProto.C_SignUpWithAccount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string account = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "PublicProto.C_SignUpWithAccount.account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // required string password = 2;
      case 2: {
        if (tag == 18) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "PublicProto.C_SignUpWithAccount.password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PublicProto.C_SignUpWithAccount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PublicProto.C_SignUpWithAccount)
  return false;
#undef DO_
}

void C_SignUpWithAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PublicProto.C_SignUpWithAccount)
  // required string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PublicProto.C_SignUpWithAccount.account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->account(), output);
  }

  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PublicProto.C_SignUpWithAccount.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PublicProto.C_SignUpWithAccount)
}

::google::protobuf::uint8* C_SignUpWithAccount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PublicProto.C_SignUpWithAccount)
  // required string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PublicProto.C_SignUpWithAccount.account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PublicProto.C_SignUpWithAccount.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PublicProto.C_SignUpWithAccount)
  return target;
}

int C_SignUpWithAccount::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_account()) {
    // required string account = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account());
  }

  if (has_password()) {
    // required string password = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  return total_size;
}
int C_SignUpWithAccount::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string account = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account());

    // required string password = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C_SignUpWithAccount::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const C_SignUpWithAccount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C_SignUpWithAccount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C_SignUpWithAccount::MergeFrom(const C_SignUpWithAccount& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_has_account();
      account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
    }
    if (from.has_password()) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void C_SignUpWithAccount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_SignUpWithAccount::CopyFrom(const C_SignUpWithAccount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_SignUpWithAccount::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void C_SignUpWithAccount::Swap(C_SignUpWithAccount* other) {
  if (other == this) return;
  InternalSwap(other);
}
void C_SignUpWithAccount::InternalSwap(C_SignUpWithAccount* other) {
  account_.Swap(&other->account_);
  password_.Swap(&other->password_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata C_SignUpWithAccount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C_SignUpWithAccount_descriptor_;
  metadata.reflection = C_SignUpWithAccount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S_SignUpRet::kAccIdFieldNumber;
#endif  // !_MSC_VER

S_SignUpRet::S_SignUpRet()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PublicProto.S_SignUpRet)
}

void S_SignUpRet::InitAsDefaultInstance() {
}

S_SignUpRet::S_SignUpRet(const S_SignUpRet& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PublicProto.S_SignUpRet)
}

void S_SignUpRet::SharedCtor() {
  _cached_size_ = 0;
  acc_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S_SignUpRet::~S_SignUpRet() {
  // @@protoc_insertion_point(destructor:PublicProto.S_SignUpRet)
  SharedDtor();
}

void S_SignUpRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S_SignUpRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S_SignUpRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S_SignUpRet_descriptor_;
}

const S_SignUpRet& S_SignUpRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_2eproto();
  return *default_instance_;
}

S_SignUpRet* S_SignUpRet::default_instance_ = NULL;

S_SignUpRet* S_SignUpRet::New(::google::protobuf::Arena* arena) const {
  S_SignUpRet* n = new S_SignUpRet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void S_SignUpRet::Clear() {
  acc_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool S_SignUpRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PublicProto.S_SignUpRet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 acc_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &acc_id_)));
          set_has_acc_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PublicProto.S_SignUpRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PublicProto.S_SignUpRet)
  return false;
#undef DO_
}

void S_SignUpRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PublicProto.S_SignUpRet)
  // required uint32 acc_id = 1;
  if (has_acc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->acc_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PublicProto.S_SignUpRet)
}

::google::protobuf::uint8* S_SignUpRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PublicProto.S_SignUpRet)
  // required uint32 acc_id = 1;
  if (has_acc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->acc_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PublicProto.S_SignUpRet)
  return target;
}

int S_SignUpRet::ByteSize() const {
  int total_size = 0;

  // required uint32 acc_id = 1;
  if (has_acc_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->acc_id());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S_SignUpRet::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const S_SignUpRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S_SignUpRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S_SignUpRet::MergeFrom(const S_SignUpRet& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_acc_id()) {
      set_acc_id(from.acc_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void S_SignUpRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_SignUpRet::CopyFrom(const S_SignUpRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_SignUpRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void S_SignUpRet::Swap(S_SignUpRet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S_SignUpRet::InternalSwap(S_SignUpRet* other) {
  std::swap(acc_id_, other->acc_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata S_SignUpRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S_SignUpRet_descriptor_;
  metadata.reflection = S_SignUpRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C_LoginByAccount::kAccountFieldNumber;
const int C_LoginByAccount::kPasswordFieldNumber;
#endif  // !_MSC_VER

C_LoginByAccount::C_LoginByAccount()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PublicProto.C_LoginByAccount)
}

void C_LoginByAccount::InitAsDefaultInstance() {
}

C_LoginByAccount::C_LoginByAccount(const C_LoginByAccount& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PublicProto.C_LoginByAccount)
}

void C_LoginByAccount::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C_LoginByAccount::~C_LoginByAccount() {
  // @@protoc_insertion_point(destructor:PublicProto.C_LoginByAccount)
  SharedDtor();
}

void C_LoginByAccount::SharedDtor() {
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void C_LoginByAccount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C_LoginByAccount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C_LoginByAccount_descriptor_;
}

const C_LoginByAccount& C_LoginByAccount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_2eproto();
  return *default_instance_;
}

C_LoginByAccount* C_LoginByAccount::default_instance_ = NULL;

C_LoginByAccount* C_LoginByAccount::New(::google::protobuf::Arena* arena) const {
  C_LoginByAccount* n = new C_LoginByAccount;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void C_LoginByAccount::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_account()) {
      account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_password()) {
      password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool C_LoginByAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PublicProto.C_LoginByAccount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string account = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "PublicProto.C_LoginByAccount.account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }

      // required string password = 3;
      case 3: {
        if (tag == 26) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "PublicProto.C_LoginByAccount.password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PublicProto.C_LoginByAccount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PublicProto.C_LoginByAccount)
  return false;
#undef DO_
}

void C_LoginByAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PublicProto.C_LoginByAccount)
  // required string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PublicProto.C_LoginByAccount.account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->account(), output);
  }

  // required string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PublicProto.C_LoginByAccount.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->password(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PublicProto.C_LoginByAccount)
}

::google::protobuf::uint8* C_LoginByAccount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PublicProto.C_LoginByAccount)
  // required string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PublicProto.C_LoginByAccount.account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // required string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PublicProto.C_LoginByAccount.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PublicProto.C_LoginByAccount)
  return target;
}

int C_LoginByAccount::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_account()) {
    // required string account = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account());
  }

  if (has_password()) {
    // required string password = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  return total_size;
}
int C_LoginByAccount::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string account = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account());

    // required string password = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C_LoginByAccount::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const C_LoginByAccount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C_LoginByAccount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C_LoginByAccount::MergeFrom(const C_LoginByAccount& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_has_account();
      account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
    }
    if (from.has_password()) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void C_LoginByAccount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_LoginByAccount::CopyFrom(const C_LoginByAccount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_LoginByAccount::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void C_LoginByAccount::Swap(C_LoginByAccount* other) {
  if (other == this) return;
  InternalSwap(other);
}
void C_LoginByAccount::InternalSwap(C_LoginByAccount* other) {
  account_.Swap(&other->account_);
  password_.Swap(&other->password_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata C_LoginByAccount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C_LoginByAccount_descriptor_;
  metadata.reflection = C_LoginByAccount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C_FastLogin::kAccIdFieldNumber;
const int C_FastLogin::kDeviceFieldNumber;
#endif  // !_MSC_VER

C_FastLogin::C_FastLogin()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PublicProto.C_FastLogin)
}

void C_FastLogin::InitAsDefaultInstance() {
}

C_FastLogin::C_FastLogin(const C_FastLogin& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PublicProto.C_FastLogin)
}

void C_FastLogin::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  acc_id_ = GOOGLE_ULONGLONG(0);
  device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C_FastLogin::~C_FastLogin() {
  // @@protoc_insertion_point(destructor:PublicProto.C_FastLogin)
  SharedDtor();
}

void C_FastLogin::SharedDtor() {
  device_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void C_FastLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C_FastLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C_FastLogin_descriptor_;
}

const C_FastLogin& C_FastLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_2eproto();
  return *default_instance_;
}

C_FastLogin* C_FastLogin::default_instance_ = NULL;

C_FastLogin* C_FastLogin::New(::google::protobuf::Arena* arena) const {
  C_FastLogin* n = new C_FastLogin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void C_FastLogin::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    acc_id_ = GOOGLE_ULONGLONG(0);
    if (has_device()) {
      device_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool C_FastLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PublicProto.C_FastLogin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 acc_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &acc_id_)));
          set_has_acc_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_device;
        break;
      }

      // required string device = 2;
      case 2: {
        if (tag == 18) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device().data(), this->device().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "PublicProto.C_FastLogin.device");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PublicProto.C_FastLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PublicProto.C_FastLogin)
  return false;
#undef DO_
}

void C_FastLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PublicProto.C_FastLogin)
  // required uint64 acc_id = 1;
  if (has_acc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->acc_id(), output);
  }

  // required string device = 2;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PublicProto.C_FastLogin.device");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->device(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PublicProto.C_FastLogin)
}

::google::protobuf::uint8* C_FastLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PublicProto.C_FastLogin)
  // required uint64 acc_id = 1;
  if (has_acc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->acc_id(), target);
  }

  // required string device = 2;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PublicProto.C_FastLogin.device");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->device(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PublicProto.C_FastLogin)
  return target;
}

int C_FastLogin::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_acc_id()) {
    // required uint64 acc_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->acc_id());
  }

  if (has_device()) {
    // required string device = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device());
  }

  return total_size;
}
int C_FastLogin::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 acc_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->acc_id());

    // required string device = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C_FastLogin::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const C_FastLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C_FastLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C_FastLogin::MergeFrom(const C_FastLogin& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_acc_id()) {
      set_acc_id(from.acc_id());
    }
    if (from.has_device()) {
      set_has_device();
      device_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void C_FastLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_FastLogin::CopyFrom(const C_FastLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_FastLogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void C_FastLogin::Swap(C_FastLogin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void C_FastLogin::InternalSwap(C_FastLogin* other) {
  std::swap(acc_id_, other->acc_id_);
  device_.Swap(&other->device_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata C_FastLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C_FastLogin_descriptor_;
  metadata.reflection = C_FastLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S_LoginRet::kAccIdFieldNumber;
#endif  // !_MSC_VER

S_LoginRet::S_LoginRet()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PublicProto.S_LoginRet)
}

void S_LoginRet::InitAsDefaultInstance() {
}

S_LoginRet::S_LoginRet(const S_LoginRet& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PublicProto.S_LoginRet)
}

void S_LoginRet::SharedCtor() {
  _cached_size_ = 0;
  acc_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S_LoginRet::~S_LoginRet() {
  // @@protoc_insertion_point(destructor:PublicProto.S_LoginRet)
  SharedDtor();
}

void S_LoginRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S_LoginRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S_LoginRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S_LoginRet_descriptor_;
}

const S_LoginRet& S_LoginRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_2eproto();
  return *default_instance_;
}

S_LoginRet* S_LoginRet::default_instance_ = NULL;

S_LoginRet* S_LoginRet::New(::google::protobuf::Arena* arena) const {
  S_LoginRet* n = new S_LoginRet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void S_LoginRet::Clear() {
  acc_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool S_LoginRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PublicProto.S_LoginRet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 acc_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &acc_id_)));
          set_has_acc_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PublicProto.S_LoginRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PublicProto.S_LoginRet)
  return false;
#undef DO_
}

void S_LoginRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PublicProto.S_LoginRet)
  // required uint64 acc_id = 1;
  if (has_acc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->acc_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PublicProto.S_LoginRet)
}

::google::protobuf::uint8* S_LoginRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PublicProto.S_LoginRet)
  // required uint64 acc_id = 1;
  if (has_acc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->acc_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PublicProto.S_LoginRet)
  return target;
}

int S_LoginRet::ByteSize() const {
  int total_size = 0;

  // required uint64 acc_id = 1;
  if (has_acc_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->acc_id());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S_LoginRet::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const S_LoginRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S_LoginRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S_LoginRet::MergeFrom(const S_LoginRet& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_acc_id()) {
      set_acc_id(from.acc_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void S_LoginRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_LoginRet::CopyFrom(const S_LoginRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_LoginRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void S_LoginRet::Swap(S_LoginRet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S_LoginRet::InternalSwap(S_LoginRet* other) {
  std::swap(acc_id_, other->acc_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata S_LoginRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S_LoginRet_descriptor_;
  metadata.reflection = S_LoginRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C_SelectPlatform::kPlatformFieldNumber;
#endif  // !_MSC_VER

C_SelectPlatform::C_SelectPlatform()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PublicProto.C_SelectPlatform)
}

void C_SelectPlatform::InitAsDefaultInstance() {
}

C_SelectPlatform::C_SelectPlatform(const C_SelectPlatform& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PublicProto.C_SelectPlatform)
}

void C_SelectPlatform::SharedCtor() {
  _cached_size_ = 0;
  platform_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C_SelectPlatform::~C_SelectPlatform() {
  // @@protoc_insertion_point(destructor:PublicProto.C_SelectPlatform)
  SharedDtor();
}

void C_SelectPlatform::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C_SelectPlatform::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C_SelectPlatform::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C_SelectPlatform_descriptor_;
}

const C_SelectPlatform& C_SelectPlatform::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_2eproto();
  return *default_instance_;
}

C_SelectPlatform* C_SelectPlatform::default_instance_ = NULL;

C_SelectPlatform* C_SelectPlatform::New(::google::protobuf::Arena* arena) const {
  C_SelectPlatform* n = new C_SelectPlatform;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void C_SelectPlatform::Clear() {
  platform_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool C_SelectPlatform::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PublicProto.C_SelectPlatform)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 platform = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &platform_)));
          set_has_platform();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PublicProto.C_SelectPlatform)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PublicProto.C_SelectPlatform)
  return false;
#undef DO_
}

void C_SelectPlatform::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PublicProto.C_SelectPlatform)
  // required uint32 platform = 1;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->platform(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PublicProto.C_SelectPlatform)
}

::google::protobuf::uint8* C_SelectPlatform::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PublicProto.C_SelectPlatform)
  // required uint32 platform = 1;
  if (has_platform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->platform(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PublicProto.C_SelectPlatform)
  return target;
}

int C_SelectPlatform::ByteSize() const {
  int total_size = 0;

  // required uint32 platform = 1;
  if (has_platform()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->platform());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C_SelectPlatform::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const C_SelectPlatform* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C_SelectPlatform*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C_SelectPlatform::MergeFrom(const C_SelectPlatform& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_platform()) {
      set_platform(from.platform());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void C_SelectPlatform::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_SelectPlatform::CopyFrom(const C_SelectPlatform& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_SelectPlatform::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C_SelectPlatform::Swap(C_SelectPlatform* other) {
  if (other == this) return;
  InternalSwap(other);
}
void C_SelectPlatform::InternalSwap(C_SelectPlatform* other) {
  std::swap(platform_, other->platform_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata C_SelectPlatform::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C_SelectPlatform_descriptor_;
  metadata.reflection = C_SelectPlatform_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S_SelectPlatformRet::kIpFieldNumber;
const int S_SelectPlatformRet::kPortFieldNumber;
const int S_SelectPlatformRet::kTokenFieldNumber;
#endif  // !_MSC_VER

S_SelectPlatformRet::S_SelectPlatformRet()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PublicProto.S_SelectPlatformRet)
}

void S_SelectPlatformRet::InitAsDefaultInstance() {
}

S_SelectPlatformRet::S_SelectPlatformRet(const S_SelectPlatformRet& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PublicProto.S_SelectPlatformRet)
}

void S_SelectPlatformRet::SharedCtor() {
  _cached_size_ = 0;
  ip_ = 0u;
  port_ = 0u;
  token_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S_SelectPlatformRet::~S_SelectPlatformRet() {
  // @@protoc_insertion_point(destructor:PublicProto.S_SelectPlatformRet)
  SharedDtor();
}

void S_SelectPlatformRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S_SelectPlatformRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S_SelectPlatformRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S_SelectPlatformRet_descriptor_;
}

const S_SelectPlatformRet& S_SelectPlatformRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_2eproto();
  return *default_instance_;
}

S_SelectPlatformRet* S_SelectPlatformRet::default_instance_ = NULL;

S_SelectPlatformRet* S_SelectPlatformRet::New(::google::protobuf::Arena* arena) const {
  S_SelectPlatformRet* n = new S_SelectPlatformRet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void S_SelectPlatformRet::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<S_SelectPlatformRet*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ip_, token_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool S_SelectPlatformRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PublicProto.S_SelectPlatformRet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ip = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_)));
          set_has_ip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // required uint32 port = 2;
      case 2: {
        if (tag == 16) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_token;
        break;
      }

      // required uint64 token = 3;
      case 3: {
        if (tag == 24) {
         parse_token:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &token_)));
          set_has_token();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PublicProto.S_SelectPlatformRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PublicProto.S_SelectPlatformRet)
  return false;
#undef DO_
}

void S_SelectPlatformRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PublicProto.S_SelectPlatformRet)
  // required uint32 ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ip(), output);
  }

  // required uint32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  // required uint64 token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PublicProto.S_SelectPlatformRet)
}

::google::protobuf::uint8* S_SelectPlatformRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PublicProto.S_SelectPlatformRet)
  // required uint32 ip = 1;
  if (has_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ip(), target);
  }

  // required uint32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  // required uint64 token = 3;
  if (has_token()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PublicProto.S_SelectPlatformRet)
  return target;
}

int S_SelectPlatformRet::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_ip()) {
    // required uint32 ip = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ip());
  }

  if (has_port()) {
    // required uint32 port = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  if (has_token()) {
    // required uint64 token = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->token());
  }

  return total_size;
}
int S_SelectPlatformRet::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 ip = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ip());

    // required uint32 port = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());

    // required uint64 token = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->token());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S_SelectPlatformRet::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const S_SelectPlatformRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S_SelectPlatformRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S_SelectPlatformRet::MergeFrom(const S_SelectPlatformRet& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void S_SelectPlatformRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_SelectPlatformRet::CopyFrom(const S_SelectPlatformRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_SelectPlatformRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S_SelectPlatformRet::Swap(S_SelectPlatformRet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S_SelectPlatformRet::InternalSwap(S_SelectPlatformRet* other) {
  std::swap(ip_, other->ip_);
  std::swap(port_, other->port_);
  std::swap(token_, other->token_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata S_SelectPlatformRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S_SelectPlatformRet_descriptor_;
  metadata.reflection = S_SelectPlatformRet_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PublicProto

// @@protoc_insertion_point(global_scope)
